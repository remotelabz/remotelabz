<?php

namespace App\MessageHandler;

use Psr\Log\LoggerInterface;
use Remotelabz\Message\Message\InstanceStateMessage;
use Doctrine\ORM\EntityManagerInterface;
use App\Repository\LabInstanceRepository;
use App\Repository\DeviceInstanceRepository;
use App\Service\Instance\InstanceManager;
use Symfony\Component\Messenger\Handler\MessageHandlerInterface;

class InstanceStateMessageHandler implements MessageHandlerInterface
{
    private $deviceInstanceRepository;
    private $labInstanceRepository;
    private $instanceManager;
    private $entityManager;
    private $logger;

    public function __construct(
        DeviceInstanceRepository $deviceInstanceRepository,
        LabInstanceRepository $labInstanceRepository,
        EntityManagerInterface $entityManager,
        InstanceManager $instanceManager,
        LoggerInterface $logger
    ) {
        $this->deviceInstanceRepository = $deviceInstanceRepository;
        $this->labInstanceRepository = $labInstanceRepository;
        $this->instanceManager = $instanceManager;
        $this->entityManager = $entityManager;
        $this->logger = $logger;
    }

    public function __invoke(InstanceStateMessage $message)
    {
        $this->logger->info("Received InstanceState message :", [
            'uuid' => $message->getUuid(),
            'type' => $message->getType(),
            'state' => $message->getState()
        ]);

        // Problem with instance because when it's an error during exporting, the uuid is a compose value and not only the uuid of the instance.
        // So if it's an error, in all case, we have to return, from the worker
        // the uuid in the first place of the first string.
        // TODO: #646 change the logic of export process to avoid to use composite information in the uuid of a state message
        $uuid=$message->getUuid();
        if ($message->getState() === InstanceStateMessage::STATE_ERROR) {
            //Check if the getUuid is a composite Uuid -> from an error generated by the Exporting process.
            //Otherwise, it's an classical error state message
            if (stripos(',',$message->getUuid())) {
                $return_array = explode(",",$message->getUuid());
                $uuid=$return_array[1];
            }
        }

        if ($message->getType() === InstanceStateMessage::TYPE_LAB)
            $instance = $this->labInstanceRepository->findOneBy(['uuid' => $uuid]);
        else if ($message->getType() === InstanceStateMessage::TYPE_DEVICE)
            $instance = $this->deviceInstanceRepository->findOneBy(['uuid' => $uuid]);

        // if an error happened, set device instance in its previous state
        if ($message->getState() === InstanceStateMessage::STATE_ERROR) {
            switch ($instance->getState()) {
                case InstanceStateMessage::STATE_STARTING:
                    $instance->setState(InstanceStateMessage::STATE_STOPPED);
                    break;

                case InstanceStateMessage::STATE_STOPPING:
                    $instance->setState(InstanceStateMessage::STATE_STARTED);
                    break;
                
                case InstanceStateMessage::STATE_CREATING:
                    $instance->setState(InstanceStateMessage::STATE_DELETED);
                    break;

                case InstanceStateMessage::STATE_CREATED:
                    $instance->setState(InstanceStateMessage::STATE_DELETED);
                    break;

                case InstanceStateMessage::STATE_DELETING:
                    $instance->setState(InstanceStateMessage::STATE_CREATED);
                    break;

                case InstanceStateMessage::STATE_EXPORTING:
                    $instance->setState(InstanceStateMessage::STATE_ERROR);
                    $this->logger->debug('Error received during exporting');

                    /* Remove newdevice template and OS created
                    As the worker doesn't send message with some information like name chosen by the user for the new device template created,
                    if we have an error, we have to delete creation done as soon as we click on Export button.
                    The solution to execute the new template creation only if the worker doesn't report an error, need to pass the name chosen
                    by the user. But this action is driven by message state receive and the worker doesn't send information in their message. It's only 
                    state message.
                    The format of $message->getUuid(), in this case is :
                        InstanceStateMessage::STATE_ERROR,
                        $deviceInstance['uuid'],
                        $labInstance["newOS_id"],
                        $labInstance["newDevice_id"],
                        $labInstance["new_os_name"],
                        $labInstance["new_os_imagename"]

                    */
                    //Uuid of the device created but to delete because an error occurs
                    //$message->getUuid();
                    $this->instanceManager->deleteDev($message->getUuid());
                    break;

                default:
                    $instance->setState($message->getState());
            }
        } else {
            $instance->setState($message->getState());

            switch ($message->getState()) {
                case InstanceStateMessage::STATE_STOPPED:
                    $this->instanceManager->setStopped($instance);
                break;
            }
        }

        if ($instance->getState() === InstanceStateMessage::STATE_DELETED) {
            $this->entityManager->remove($instance);
        } else {
            $this->entityManager->persist($instance);
        }

        $this->entityManager->flush();
    }
}
