{% extends 'dashboard.base.html.twig' %}

{% block header %}
    {% set category = 'dashboard_groups' %}
    {{ parent() }}
{% endblock %}

{% block breadcrumbs %}
    {% set breadcrumbs = breadcrumbs|merge({ 'Members': path('dashboard_group_members', {'slug': group.path}) }) %}
    {% set currentGroup = group %}
    {% for parent in group.getFullyQualifiedName()|reverse %}
        {% set breadcrumbs = breadcrumbs|merge({ (parent): path('dashboard_show_group', {'slug': currentGroup.getPath()}) }) %}
        {% set currentGroup = currentGroup.parent %}
    {% endfor %}
    {{ parent() }}
{% endblock %}

{% macro groupParent(group) %}
    {% if group.parent is not null %}{{ _self.groupParent(group.parent) }} {{ group.parent.name }} /{% endif %}
{% endmacro %}

{% block sidebar %}
    {% set category = 'dashboard_group_members' %}
    {% include "group.sidebar.html.twig" %}
{% endblock %}

{% block wrapper %}
{% embed 'modal.html.twig' with {'title': 'Import users from file'|trans, 'class': 'import-group-user-modal'} %}
        {% block body %}
            <p>The CSV file, encoded in UTF8, must contains the email user in the following format:
                <br>
                <br>
                <kbd>email</kbd>
                <br><br>
                <span class="text-danger">Warning:</span> Lines with an e-mail that does not match any user will be silently ignored.
            </p>
            {{ form(addGroupUserFromFileForm, {'id': 'addGroupUserFromFileForm'}) }}
        {% endblock %}
    {% endembed %}

    {% macro groupParent(group) %}
       {% if group.parent is not null %}{{ _self.groupParent(group.parent) }} <a href="{{ path('admin_show_group', {slug: group.parent.path}) }}">{{ group.parent.name }}</a> /{% endif %}
    {% endmacro %}
    <div class="content-title">
        <div class="content-title-infos">
            <h3>Members</h3>
        </div>
    </div>
    <div class="content-body">
        <div class="row">
            <div class="col">
                {% if (is_granted('add_member', group) or is_granted('ROLE_ADMINISTRATOR')) %}
                <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                    <li class="nav-item" role="presentation">
                      <a class="nav-link active" id="add-users-tab" data-toggle="pill" href="#add-users" role="tab" aria-controls="add-users" aria-selected="true">Add users</a>
                    </li>
                    <li class="nav-item" role="presentation">
                      <a class="nav-link" id="import-from-group-tab" data-toggle="pill" href="#import-from-group" role="tab" aria-controls="import-from-group" aria-selected="false">Import from group</a>
                    </li>
                    <li class="nav-item" role="presentation">
                    <a class="nav-link" data-target=".import-group-user-modal" data-toggle="modal" href="#import-from-file" role="tab" aria-controls="import-from-group" aria-selected="false">
                        <i class="fa fa-upload"></i> {{ 'Import from file'|trans }}
                    </a>
                    </li>
                </ul>
                <div class="tab-content" id="pills-tabContent">
                    <div class="tab-pane fade show active" id="add-users" role="tabpanel" aria-labelledby="add-users-tab">
                        <p>
                            Add new member(s) to <strong>{{group.name}}</strong>
                        </p>
                        <form action="{{ path('add_user_group', {slug: group.path}) }}" method="POST">
                            <div class="d-flex">
                                <div class="flex-grow-1 mr-2">
                                    <div>{{ react_component('UserSelect') }}</div>
                                    <div class="form-text text-muted">
                                        Search for members by name or email address.
                                    </div>
                                </div>

                                <div class="mr-2 w-25">
                                    <select class="form-control" name="role" id="Role" style="height:38px;">
                                        <option value="user">User</option>
                                        <option value="admin">Admin</option>
                                    </select>
                                </div>
                                <div>
                                   <button type="submit" class="btn btn-success">Add selected user(s)</button> 
                                </div>
                            </div>
                        </form>
                    </div>
                    <div class="tab-pane fade" id="import-from-group" role="tabpanel" aria-labelledby="import-from-group-tab">
                        <p>
                            Import members from another group to <strong>{{group.name}}</strong>
                        </p>
                        <form action="{{ path('add_user_group', {slug: group.path}) }}" method="POST">
                            <div class="d-flex">
                                <div class="flex-grow-1 mr-2">
                                    <div>{{ react_component('GroupImport', {'props': props}) }}</div>
                                </div>
                            </div>
                        </form>
                    </div>
                </div>
                {% endif %}
                <div class="top-panel">
                    <div class="quick-actions">
                        <input type="checkbox" name="selectAll" id="selectAll" value="selectAll" onClick="checkAll()" class="mr-1"/>
                        <button class="btn btn-danger" data-toggle="modal" onClick="deleteUsers('{{group.path}}')" type="button">
                            {{ svg('remove') }}
                        </button>  
                    </div>
                    <ul class="nav-links nav nav-tabs">
                        <li class="active">
                            <a href="#currentMembers" id="currentMembers">
                                <span>Current</span> <span class="badge badge-pill">{{ group.users|length }}</span>
                            </a>
                        </li>
                    </ul>
                </div>
                {# <div class="search-panel">
                    <form action="{{ path('labs') }}" method="GET">
                        <input type="search" class="form-control input-sm" name="search"
                        placeholder="Search by name"
                        spellcheck="false" value="{{ search|default('') }}" type="search">
                    </form>
                </div> #}
                <div class="labs-panel">
                    {% for user in group.users %}
                        <div class="lab-item {% if not loop.last %}border-bottom{% endif %}">
                            <div class="d-flex align-items-center">
                                <img src="/users/{{user.id}}/picture?size=32" alt="{{user.name}}" class="rounded-circle s40 mr-3" />

                                <div class="d-flex flex-column">
                                    <div class="fw600" id="{{user.id}}-badges">
                                        <span class="fw600">{{ user.name }}</span>
                                        {% if user.id == app.user.id %}
                                            <label class="badge badge-success ml-2 mb-0">It's you!</label>
                                        {% endif %}
                                        {% if group.isOwner(user) %}
                                            <label class="badge badge-info ml-2 mb-0">Owner</label>
                                        {% endif %}
                                        {% if group.isAdmin(user) %}
                                            <label class="badge badge-warning ml-2 mb-0">Admin</label>
                                        {% endif %}
                                    </div>
                                    {# <div class="text-muted">{{ user.email }}</div> #}
                                </div>
                                <div class="flex-grow-1"></div>
                               {% if (( 'ROLE_ADMINISTRATOR' in app.user.roles
                                     or 'ROLE_SUPER_ADMINISTRATOR' in app.user.roles
                                     or (group.isOwner(app.user) )
                                     or ( group.isAdmin(app.user)) ) and ( not group.isOwner(user) ))
                                %}
                                    
                                    <div style="min-width: 150px"> 
                                        {{- react_component('GroupRoleSelect', {'props': {'role': group.getUserRole(user), 'user': user.id, 'group': group.path}}) -}}
                                    </div>
                                    <div class="ml-5">
                                        <input type="checkbox" name="selectUserGroup" class="selectUserGroup" value="{{user.id}}"/>
                                    </div>
                                    <div class="ml-2">
                                        <a href="{{ path('remove_user_group', {slug: group.path, userId: user.id}) }}" class="btn btn-danger">{{ svg('remove') }}</a>
                                    </div>
                                {% endif %}
                            </div>
                        </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
    <script type="text/javascript">
    function checkAll() {
            const boxes = document.querySelectorAll(".selectUserGroup");
            let checkAll = document.getElementById("selectAll");

            if (checkAll.checked == true) {
                for(let box of boxes) {
                    box.checked = true
                }
            }
            else {
                for(let box of boxes) {
                    box.checked = false
                }
            }
        }

        function deleteUsers(slug) {
            const boxes = document.querySelectorAll(".selectUserGroup");

            var usersToDelete = [];
            var i = 0;

            for (let box of boxes) {
                if (box.checked) {
                    usersToDelete.push(box.value);
                }
            }
            $.ajax({
                type: "GET",
                url: `/api/groups/${slug}/members`
            }).then((response) => {
                var groupUsers = response.users;

                console.log(groupUsers)
                for(let userId of usersToDelete) {
                    i++;
                    for (let groupUser of groupUsers) {
                        if (userId == groupUser.id && groupUser.role == "user") {
                            $.ajax({
                                type: "DELETE",
                                url: `/api/groups/${slug}/user/${userId}`
                            }).then(()=> {
                                if (i == usersToDelete.length) {
                                    location.href = `/groups/${slug}/members`; 
                                }
                            })
                        }
                    }
                }
            })
        }
    </script>
{% endblock %}