#!/usr/bin/env php
<?php

use GetOpt\GetOpt;
use GetOpt\Option;
use GetOpt\Argument;
use RemoteLabz\Logger;
use RemoteLabz\Installer;
use GetOpt\ArgumentException;
use GetOpt\ArgumentException\Invalid;
use GetOpt\ArgumentException\Missing;
use GetOpt\ArgumentException\Unexpected;

require dirname(__DIR__) . '/lib/autoload.php';

// Default values
const REMOTELABZ_PATH               = "/opt/remotelabz";
/*

const REMOTELABZ_DATABASE_SERVER    = "localhost";
const REMOTELABZ_DATABASE_USER      = "symfony";
const REMOTELABZ_DATABASE_PASSWORD  = "symfony";
const REMOTELABZ_DATABASE_NAME      = "symfony";
const REMOTELABZ_WORKER_SERVER      = "localhost";
const REMOTELABZ_WORKER_PORT        = 8080;
const WEBSOCKET_PROXY_SERVER        = "localhost";
const WEBSOCKET_PROXY_PORT          = 8888;
const WEBSOCKET_PROXY_API_PORT      = 8889;
*/
const REMOTELABZ_SERVER_NAME        = "remotelabz.com";
const INSTALL_LOG_PATH              = "/var/log/remotelabz/install.log";
const REMOTELABZ_ENV                = "prod";
const REMOTELABZ_MAX_FILESIZE       = "3000M";
const REMOTELABZ_PORT               = 80;
const MAILER_DSN                    = "smtp://localhost:25?encryption=&auth_mode=";

$getopt = new GetOpt([
    Option::create('h', 'help', GetOpt::NO_ARGUMENT)
        ->setDescription("Show this help text."),

    Option::create('e', 'environment', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the environment of the application. Must be \"prod\" or \"dev\". Default : " . REMOTELABZ_ENV)
        ->setArgument(new Argument(REMOTELABZ_ENV, null, 'environment'))
        ->setValidation(function ($value) {
            return in_array($value, ["dev", "prod"]);
        }),

    Option::create('s', 'max-filesize', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set PHP max_upload_filesize environment variable while configuring Apache. Must be followed by K, M or G prefix (case-insensitive). Default : " . REMOTELABZ_MAX_FILESIZE)
        ->setArgument(new Argument(REMOTELABZ_MAX_FILESIZE, null, 'size'))
        ->setValidation(function ($value) {
            $number = substr($value, 0, -1);
            $multiplier = strtoupper(substr($value, -1));
            return is_numeric($number) && in_array($multiplier, ['K', 'M', 'G']);
        }),

    Option::create('p', 'port', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the port used by RemoteLabz. Default : " . REMOTELABZ_PORT)
        ->setArgument(new Argument(REMOTELABZ_PORT, 'is_numeric', 'port')),
/*
    Option::create(null, 'worker-server', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the address used by RemoteLabz to connect to remotelabz-worker. Default : " . REMOTELABZ_WORKER_SERVER)
        ->setArgument(new Argument(REMOTELABZ_WORKER_SERVER, 'is_string', 'address')),

    Option::create(null, 'worker-port', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the port used by RemoteLabz to connect to remotelabz-worker. Default : " . REMOTELABZ_WORKER_PORT)
        ->setArgument(new Argument(REMOTELABZ_WORKER_PORT, 'is_numeric', 'port')),

    Option::create(null, 'proxy-server', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the address used by RemoteLabz to connect to configurable-http-proxy. Default : " . WEBSOCKET_PROXY_SERVER)
        ->setArgument(new Argument(WEBSOCKET_PROXY_SERVER, 'is_string', 'address')),

    Option::create(null, 'proxy-port', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the port used by RemoteLabz to connect to configurable-http-proxy. Default : " . WEBSOCKET_PROXY_PORT)
        ->setArgument(new Argument(WEBSOCKET_PROXY_PORT, 'is_numeric', 'port')),

    Option::create(null, 'proxy-api-port', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the port used by RemoteLabz to connect to configurable-http-proxy internal API. Default : " . WEBSOCKET_PROXY_API_PORT)
        ->setArgument(new Argument(WEBSOCKET_PROXY_API_PORT, 'is_numeric', 'port')),

    Option::create(null, 'database-server', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the address of the SQL server. Default : " . REMOTELABZ_DATABASE_SERVER)
        ->setArgument(new Argument(REMOTELABZ_DATABASE_SERVER, 'is_string', 'address')),

    Option::create(null, 'database-user', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the user of the SQL server. Default : " . REMOTELABZ_DATABASE_USER)
        ->setArgument(new Argument(REMOTELABZ_DATABASE_USER, 'is_string', 'user')),

    Option::create(null, 'database-password', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the password of the SQL server. Default : " . REMOTELABZ_DATABASE_PASSWORD)
        ->setArgument(new Argument(REMOTELABZ_DATABASE_PASSWORD, 'is_string', 'password')),

    Option::create(null, 'database-name', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the databases name of the SQL server. Default : " . REMOTELABZ_DATABASE_NAME)
        ->setArgument(new Argument(REMOTELABZ_DATABASE_NAME, 'is_string', 'name')),

    Option::create(null, 'mailer-url', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the URL used to contact mail server. Default : " . MAILER_URL)
        ->setArgument(new Argument(MAILER_URL, 'is_string', 'url')),
*/
    Option::create(null, 'server-name', GetOpt::REQUIRED_ARGUMENT)
        ->setDescription("Set the server name of RemoteLabz VirtualHost. Default : " . REMOTELABZ_SERVER_NAME)
        ->setArgument(new Argument(REMOTELABZ_SERVER_NAME, 'is_string', 'name')),
/*
    Option::create(null, 'no-permission', GetOpt::NO_ARGUMENT)
        ->setDescription("Skip file permissions step."),
*/
    Option::create(null, 'symlink', GetOpt::NO_ARGUMENT)
        ->setDescription("Symlink remotelabz to this folder instead of copying files."),

]);
try {
    $getopt->process();
} catch (ArgumentException $e) {
    Logger::print("Error: ", Logger::COLOR_RED);
    if ($e instanceof Invalid) {
        Logger::print("Invalid argument: ", Logger::COLOR_RED);
    } elseif ($e instanceof Missing) {
        Logger::print("Missing value: ", Logger::COLOR_RED);
    } elseif ($e instanceof Unexpected) {
        Logger::print("Unexpected value: ", Logger::COLOR_RED);
    }
    Logger::print($e->getMessage() . "\n", Logger::COLOR_RED);
    exit(1);
}

// Help
if ($getopt->getOption('help')) {
    echo $getopt->getHelpText();
    exit(0);
}

$installer = Installer::create(REMOTELABZ_PATH, $getopt->getOptions());

try {
    $installer->checkRoot();
} catch (Exception $e) {
    Logger::print($e->getMessage() . "\n", Logger::COLOR_RED);
    exit(1);
}

$logger = new Logger(INSTALL_LOG_PATH);
$installer->setLogger($logger);

try {
    $installer->checkRequirements();
} catch (Exception $e) {
    Logger::print($e->getMessage() . "\n", Logger::COLOR_RED);
    $logger->error($e->getMessage());
    exit(1);
}

try {
    $installer->install();
} catch (Exception $e) {
    echo "Error ❌\n";
    $count = 0;
    while ($e !== null) {
        $logger->error($e->getMessage());
        Logger::print("#$count " . $e->getFile() . "(" . $e->getLine() . "): " . $e->getMessage() . "\n", Logger::COLOR_RED);
        $e = $e->getPrevious();
        $count++;
    }
    Logger::print("Please check the install logs in " . INSTALL_LOG_PATH . " to get more information.\n", Logger::COLOR_RED);
    exit(1);
}
echo "🔥 Change in your .env.local the value of parameter APP_MAINTENANCE to 0 to give access to the RemoteLabz Application 🔥\n";


exit(0);
